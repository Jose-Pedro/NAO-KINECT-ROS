// Generated by gencpp from file naoqi_bridge_msgs/BodyPoseWithSpeedGoal.msg
// DO NOT EDIT!


#ifndef NAOQI_BRIDGE_MSGS_MESSAGE_BODYPOSEWITHSPEEDGOAL_H
#define NAOQI_BRIDGE_MSGS_MESSAGE_BODYPOSEWITHSPEEDGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace naoqi_bridge_msgs
{
template <class ContainerAllocator>
struct BodyPoseWithSpeedGoal_
{
  typedef BodyPoseWithSpeedGoal_<ContainerAllocator> Type;

  BodyPoseWithSpeedGoal_()
    : posture_name()
    , speed(0.0)  {
    }
  BodyPoseWithSpeedGoal_(const ContainerAllocator& _alloc)
    : posture_name(_alloc)
    , speed(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _posture_name_type;
  _posture_name_type posture_name;

   typedef float _speed_type;
  _speed_type speed;




  typedef boost::shared_ptr< ::naoqi_bridge_msgs::BodyPoseWithSpeedGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::naoqi_bridge_msgs::BodyPoseWithSpeedGoal_<ContainerAllocator> const> ConstPtr;

}; // struct BodyPoseWithSpeedGoal_

typedef ::naoqi_bridge_msgs::BodyPoseWithSpeedGoal_<std::allocator<void> > BodyPoseWithSpeedGoal;

typedef boost::shared_ptr< ::naoqi_bridge_msgs::BodyPoseWithSpeedGoal > BodyPoseWithSpeedGoalPtr;
typedef boost::shared_ptr< ::naoqi_bridge_msgs::BodyPoseWithSpeedGoal const> BodyPoseWithSpeedGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::naoqi_bridge_msgs::BodyPoseWithSpeedGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::naoqi_bridge_msgs::BodyPoseWithSpeedGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace naoqi_bridge_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/indigo/share/nav_msgs/cmake/../msg'], 'naoqi_bridge_msgs': ['/home/jose/medeiros_ws/src/naoqi_bridge_msgs/msg', '/home/jose/medeiros_ws/devel/share/naoqi_bridge_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/indigo/share/trajectory_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::naoqi_bridge_msgs::BodyPoseWithSpeedGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::naoqi_bridge_msgs::BodyPoseWithSpeedGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::naoqi_bridge_msgs::BodyPoseWithSpeedGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::naoqi_bridge_msgs::BodyPoseWithSpeedGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::naoqi_bridge_msgs::BodyPoseWithSpeedGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::naoqi_bridge_msgs::BodyPoseWithSpeedGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::naoqi_bridge_msgs::BodyPoseWithSpeedGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6c5f7bd37d2a5befe00383fa440a8f6e";
  }

  static const char* value(const ::naoqi_bridge_msgs::BodyPoseWithSpeedGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6c5f7bd37d2a5befULL;
  static const uint64_t static_value2 = 0xe00383fa440a8f6eULL;
};

template<class ContainerAllocator>
struct DataType< ::naoqi_bridge_msgs::BodyPoseWithSpeedGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "naoqi_bridge_msgs/BodyPoseWithSpeedGoal";
  }

  static const char* value(const ::naoqi_bridge_msgs::BodyPoseWithSpeedGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::naoqi_bridge_msgs::BodyPoseWithSpeedGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# goal: a predefined body pose name :\n\
# Crouch, LyingBack, LyingBelly, Sit, SitRelax, Stand, StandInit, StandZero\n\
\n\
string posture_name\n\
float32 speed\n\
";
  }

  static const char* value(const ::naoqi_bridge_msgs::BodyPoseWithSpeedGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::naoqi_bridge_msgs::BodyPoseWithSpeedGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.posture_name);
      stream.next(m.speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct BodyPoseWithSpeedGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::naoqi_bridge_msgs::BodyPoseWithSpeedGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::naoqi_bridge_msgs::BodyPoseWithSpeedGoal_<ContainerAllocator>& v)
  {
    s << indent << "posture_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.posture_name);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NAOQI_BRIDGE_MSGS_MESSAGE_BODYPOSEWITHSPEEDGOAL_H
